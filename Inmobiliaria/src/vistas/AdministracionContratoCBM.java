/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

/**
 *
 * @author esnaa
 */
public class AdministracionContratoCBM extends javax.swing.JInternalFrame {

    /**
     * Creates new form AdministracionContratoCBM
     */
    public AdministracionContratoCBM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jcbusqueda = new javax.swing.JComboBox<>();
        jtLetra = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("CONTRATO - CONSULTA Y MODIFICACION ");

        jLabel3.setText("BUSCAR POR:");

        jcbusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbusquedaActionPerformed(evt);
            }
        });

        jtLetra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtLetraKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtLetra))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtLetra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(463, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbusquedaActionPerformed

    }//GEN-LAST:event_jcbusquedaActionPerformed

    private void jtLetraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtLetraKeyReleased
        borrarDatos();
        String letra = (String)jcbusqueda.getSelectedItem();
        InmuebleData inmo = new InmuebleData();

        switch (letra) {
            case "id_inmueble":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getIdInmueble()).startsWith(jtLetra.getText())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "direccion":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getDireccion()).toLowerCase().startsWith(jtLetra.getText().toLowerCase())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "altura":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getAltura()).startsWith(jtLetra.getText())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "tipo":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getTipo()).toLowerCase().startsWith(jtLetra.getText().toLowerCase())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "superficie":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getSuperficie()).startsWith(jtLetra.getText())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "precio":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getPrecio()).startsWith(jtLetra.getText())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "disponibilidad":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getDisponibilidad()).toLowerCase().startsWith(jtLetra.getText().toLowerCase())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "id_propietario":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.getPropid()).startsWith(jtLetra.getText())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
            case "estado":
            for (Inmueble i : inmo.listarInmuebles()) {
                if (String.valueOf(i.isEstado()).startsWith(jtLetra.getText())) {
                    modelo.addRow(new Object[]{i.getIdInmueble(), i.getDireccion(), i.getAltura(), i.getTipo(), i.getSuperficie(), i.getPrecio(), i.getDisponibilidad(), i.getPropid(), i.isEstado()});
                }
            }
            break;
        }
    }//GEN-LAST:event_jtLetraKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> jcbusqueda;
    private javax.swing.JTextField jtLetra;
    // End of variables declaration//GEN-END:variables
}
