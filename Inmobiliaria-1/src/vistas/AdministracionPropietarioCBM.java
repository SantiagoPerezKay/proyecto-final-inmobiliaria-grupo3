package vistas;

import acceso_a_datos.PropietarioData;
import inmobiliaria.entidades.Propietario;
import javafx.beans.value.ObservableObjectValue;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;

public class AdministracionPropietarioCBM extends javax.swing.JInternalFrame {

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int a, int c) {
            return (c != 0) && (c != 6);
        }
    };

    public AdministracionPropietarioCBM() {
        initComponents();
        cargarCabecera();
        cargarTabla();
        cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jtpalabra = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpropietarios = new javax.swing.JTable();
        jcbusqueda = new javax.swing.JComboBox<>();
        jOrden = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jbguardarcambios = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jbsalir = new javax.swing.JButton();
        jtrestablecer = new javax.swing.JButton();
        jEstado = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1060, 660));
        setMinimumSize(new java.awt.Dimension(1060, 660));
        setPreferredSize(new java.awt.Dimension(1060, 660));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(1076, 630));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtpalabra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtpalabraKeyReleased(evt);
            }
        });
        jPanel1.add(jtpalabra, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 180, 240, 30));

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("BUSCAR POR");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, -1, 30));

        jtpropietarios.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 12)); // NOI18N
        jtpropietarios.setForeground(new java.awt.Color(51, 51, 51));
        jtpropietarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtpropietarios);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 310, 550, 150));

        jcbusqueda.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 12)); // NOI18N
        jcbusqueda.setForeground(new java.awt.Color(51, 51, 51));
        jcbusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbusquedaActionPerformed(evt);
            }
        });
        jPanel1.add(jcbusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, 150, 30));

        jOrden.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jOrden.setForeground(new java.awt.Color(51, 51, 51));
        jOrden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Nombre", "Apellido", "Telefono", "Dni", "Domicilio" }));
        jOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrdenActionPerformed(evt);
            }
        });
        jPanel1.add(jOrden, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 220, 400, 30));

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 22)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("ORDENAR POR");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 220, 160, -1));

        jLabel9.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("MOSTRAR ");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 360, -1, 20));

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 22)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("MOSTRAR");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, 150, 40));

        jbguardarcambios.setBackground(new java.awt.Color(153, 153, 153));
        jbguardarcambios.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 24)); // NOI18N
        jbguardarcambios.setForeground(new java.awt.Color(51, 51, 51));
        jbguardarcambios.setText("GUARDAR CAMBIOS");
        jbguardarcambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbguardarcambiosActionPerformed(evt);
            }
        });
        jPanel1.add(jbguardarcambios, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 500, 550, 40));

        jButton1.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 22)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 51));
        jButton1.setText("ELIMINAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 550, 200, 40));

        jbsalir.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 22)); // NOI18N
        jbsalir.setForeground(new java.awt.Color(51, 51, 51));
        jbsalir.setText("SALIR");
        jbsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbsalirActionPerformed(evt);
            }
        });
        jPanel1.add(jbsalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 550, 120, 40));

        jtrestablecer.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 22)); // NOI18N
        jtrestablecer.setForeground(new java.awt.Color(51, 51, 51));
        jtrestablecer.setText("RESTABLECER");
        jtrestablecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtrestablecerActionPerformed(evt);
            }
        });
        jPanel1.add(jtrestablecer, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 550, 210, 40));

        jEstado.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 14)); // NOI18N
        jEstado.setForeground(new java.awt.Color(51, 51, 51));
        jEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Activo", "Inactivo" }));
        jEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEstadoActionPerformed(evt);
            }
        });
        jPanel1.add(jEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 260, 400, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONS/Sis gestion.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 0, 620, 630));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONS/BUSCARpropietario.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 450, 630));

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-10, 0, 1050, 630);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtrestablecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtrestablecerActionPerformed
        borrarDatos();
        cargarTabla();
        jtpalabra.setText("");
        jEstado.setSelectedIndex(0);
        jOrden.setSelectedIndex(0);
    }//GEN-LAST:event_jtrestablecerActionPerformed

    private void jtpalabraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtpalabraKeyReleased

        borrarDatos();

        String opcion = (String) jcbusqueda.getSelectedItem();

        PropietarioData propietariodata = new PropietarioData();

        switch (opcion) {
            case "id_propietario":
                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.getIdPropietario()).startsWith(jtpalabra.getText())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }

                break;
            case "nombre":

                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.getNombre().toLowerCase()).startsWith(jtpalabra.getText().toLowerCase())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }

                break;
            case "apellido":
                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.getApellido().toLowerCase()).startsWith(jtpalabra.getText().toLowerCase())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }
                break;
            case "telefono":
                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.getTelefono()).startsWith(jtpalabra.getText())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }
                break;
            case "dni":
                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.getDni()).startsWith(jtpalabra.getText())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }
                break;
            case "domicilio":
                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.getDomicilio().toLowerCase()).startsWith(jtpalabra.getText().toLowerCase())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }
                break;
            case "estado":
                for (Propietario prop : propietariodata.listarPropietarios()) {
                    if (String.valueOf(prop.isEstado()).startsWith(jtpalabra.getText().toLowerCase())) {
                        modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
                    }
                }
                break;
        }


    }//GEN-LAST:event_jtpalabraKeyReleased

    private void jbsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbsalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbsalirActionPerformed

    private void jcbusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbusquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbusquedaActionPerformed

    private void jbguardarcambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbguardarcambiosActionPerformed
        int fila = jtpropietarios.getSelectedRow();

        PropietarioData propietariodata = new PropietarioData();
        Propietario prop = new Propietario();

       try {
        String nombre = (String) jtpropietarios.getValueAt(fila, 1);
        String apellido = (String) jtpropietarios.getValueAt(fila, 2);
        String telefono = (String) jtpropietarios.getValueAt(fila, 3);
        String dni = (String) jtpropietarios.getValueAt(fila, 4);
        String domicilio=(String) jtpropietarios.getValueAt(fila, 5);
       
     if ((validarCampoTexto(nombre)) && (validarCampoTexto(apellido) && (validarCampoNumerico(telefono))&& (validarCampoNumerico(dni))&&(validarCampoTexto(domicilio)))){

        prop.setIdPropietario((int) jtpropietarios.getValueAt(fila, 0));
        prop.setNombre(nombre);
        prop.setApellido(apellido);
        prop.setTelefono(telefono);
        prop.setDni(dni);
        prop.setDomicilio(domicilio);
        prop.setEstado((boolean) jtpropietarios.getValueAt(fila, 6));

        propietariodata.actualizarPropietario(prop);
        borrarDatos();
        jtpalabra.setText("");

        cargarTabla();
     }
       }catch (Exception e){
           System.out.println("erro:"+e.getMessage());
       }

    }//GEN-LAST:event_jbguardarcambiosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        PropietarioData propietariodata = new PropietarioData();

        int fila = jtpropietarios.getSelectedRow();

        Propietario prop = new Propietario();

        prop.setIdPropietario((int) jtpropietarios.getValueAt(fila, 0));
        prop.setNombre((String) jtpropietarios.getValueAt(fila, 1));
        prop.setApellido((String) jtpropietarios.getValueAt(fila, 2));
        prop.setTelefono((String) jtpropietarios.getValueAt(fila, 3));
        prop.setDni((String) jtpropietarios.getValueAt(fila, 4));
        prop.setDomicilio((String) jtpropietarios.getValueAt(fila, 5));
        prop.setEstado(false);

        propietariodata.actualizarPropietario(prop);
        borrarDatos();
        jtpalabra.setText("");
        cargarTabla();


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrdenActionPerformed
        ordenarTabla();
    }//GEN-LAST:event_jOrdenActionPerformed

    private void jEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEstadoActionPerformed
        ordenarTabla();
    }//GEN-LAST:event_jEstadoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> jOrden;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbguardarcambios;
    private javax.swing.JButton jbsalir;
    private javax.swing.JComboBox<String> jcbusqueda;
    private javax.swing.JTextField jtpalabra;
    private javax.swing.JTable jtpropietarios;
    private javax.swing.JButton jtrestablecer;
    // End of variables declaration//GEN-END:variables

    private void ordenarTabla(){
        String eleccion = (String) jOrden.getSelectedItem();
        String estado = (String) jEstado.getSelectedItem();
        int act = 3;
        
        if (jEstado.getSelectedItem()!=null){
            if (estado=="Activo"){
                act = 1;
            }else if (estado=="Inactivo"){
                act = 0;
            }else{
                act = 3;
            }
        }
        
       PropietarioData inmData = new PropietarioData();

        switch (eleccion){
            case "Id" :
            borrarDatos();
            for (Propietario prop : inmData.ordenarX(eleccion, act)) {
                modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
            }
            break;
            case "Nombre":
            borrarDatos();
            for (Propietario prop : inmData.ordenarX(eleccion, act)) {
                modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
            }
            break;
            case "Apellido":
            borrarDatos();
            for (Propietario prop : inmData.ordenarX(eleccion, act)) {
               modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
            }
            break;
            case "Telefono":
            borrarDatos();
            for (Propietario prop : inmData.ordenarX(eleccion, act)) {
              modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
            }
            break;
            case "Dni":
            borrarDatos();
            for (Propietario prop : inmData.ordenarX(eleccion, act)) {
              modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
            }
            break;
            case "Domicilio":
            borrarDatos();
            for (Propietario prop : inmData.ordenarX(eleccion, act)) {
              modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
            }
            break;
        }
    }
    
    public void cargarCabecera() {
        modelo.addColumn("Id Propietario");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Telefono");
        modelo.addColumn("DNI");
        modelo.addColumn("Domicilio");
        modelo.addColumn("Estado");
        jtpropietarios.setModel(modelo);
    }

    public void cargarCombo() {

        jcbusqueda.addItem("id_propietario");
        jcbusqueda.addItem("nombre");
        jcbusqueda.addItem("apellido");
        jcbusqueda.addItem("telefono");
        jcbusqueda.addItem("dni");
        jcbusqueda.addItem("domicilio");
        jcbusqueda.addItem("estado");
    }

    public void cargarTabla() {

        PropietarioData propietariodata = new PropietarioData();
        for (Propietario prop : propietariodata.listarPropietarios()) {

            modelo.addRow(new Object[]{prop.getIdPropietario(), prop.getNombre(), prop.getApellido(), prop.getTelefono(), prop.getDni(), prop.getDomicilio(), prop.isEstado()});
        }

    }

    public void filtrarTabla(String palabraABuscar) {

    }

    private void borrarDatos() {

        int f = modelo.getRowCount() - 1; //obtengo total de filas de la tabla

        for (; f >= 0; f--) { //recorro filas para borrar 1 por 1 en iteracion.

            modelo.removeRow(f);// remuevo valor por indice en la tabla "jcTable"
        }

    }

    public boolean validarCadena(String cadena) {
        // Utilizamos una expresión regular para verificar si la cadena contiene solo letras y espacios en blanco
        // ^ indica el inicio de la cadena, [a-zA-Z ]+ permite letras mayúsculas y minúsculas y espacios en blanco,
        // y $ indica el final de la cadena.
        return cadena.matches("^[a-zA-Z ]+$");
    }
 public boolean validarCampoNumerico(String textfield) {
        if (textfield.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No pueden haber campos vacios.");
            
            return false;

        } else if (!textfield.matches("^[0-9]+$")) {
            JOptionPane.showMessageDialog(null, "El campo solo puede contener numeros.");
          
          
            return false;
        }
        return true;
    }

    //metodos validadores de texto
    public boolean validarCampoTexto(String textfield) {
        if (textfield.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No pueden haber campos vacios.");
           
            return false;
        } else if (!textfield.matches("^[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ'\\s]+$")) {
            JOptionPane.showMessageDialog(null, "El campo solo puede contener letras.");
           
           
            return false;
        }
        return true;
    }

}
